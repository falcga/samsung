import java.util.Random;
import java.util.Scanner;

public class Person {
    private int x;
    private int y;
    private String image = "\uD83E\uDDD9\u200D";
    private int lives = 3;
    private final int maxLives = 3;
    private Scanner scanner = new Scanner(System.in);

    public Person(int startX, int startY) {
        this.x = startX;
        this.y = startY;
    }

    public boolean processMove(String[][] board, String castle, String monster) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫—É–¥–∞ –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂ (—Ö–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É)");
        System.out.println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - (x: " + x + ", y: " + y + ")");

        int targetX = scanner.nextInt();
        int targetY = scanner.nextInt();
        System.out.println("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: " + targetX + ", " + targetY);

        if (!isMoveCorrect(targetX, targetY)) {
            System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–æ–¥! –ú–æ–∂–Ω–æ —Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏.");
            return false;
        }

        String targetCell = board[targetY - 1][targetX - 1];

        if (targetCell.equals("  ")) {
            board[y - 1][x - 1] = "  ";
            this.x = targetX;
            this.y = targetY;
            board[y - 1][x - 1] = image;
            System.out.println("–•–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π; –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: " + x + ", " + y);
            return true;
        }
        else if (targetCell.equals(castle)) {
            System.out.println("üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∑–∞–º–∫–∞! –ü–æ–±–µ–¥–∞!");
            return true;
        }
        else if (targetCell.equals(monster)) {
            System.out.println("üëæ –í—Å—Ç—Ä–µ—Ç–∏–ª—Å—è –º–æ–Ω—Å—Ç—Ä! –†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:");
            boolean battleResult = handleMonsterBattle();

            if (!battleResult) {
                decreaseLives();
                System.out.println("üíî –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü–æ—Ç–µ—Ä—è–Ω–∞ –∂–∏–∑–Ω—å.");
            } else {
                System.out.println("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥–µ–Ω!");
                board[y - 1][x - 1] = "  ";
                this.x = targetX;
                this.y = targetY;
                board[y - 1][x - 1] = image;
            }
            return true;
        }
        else {
            System.out.println("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞!");
            return false;
        }
    }

    private boolean handleMonsterBattle() {
        Random rnd = new Random();
        int difficulty = (lives == 0) ? 1 : 2;

        int num1, num2;
        if (difficulty == 1) { // easy
            num1 = rnd.nextInt(100) + 1;
            num2 = rnd.nextInt(100) + 1;
        } else { // hard
            num1 = rnd.nextInt(300) + 1;
            num2 = rnd.nextInt(300) + 1;
        }

        System.out.println("–ß–µ–º—É —Ä–∞–≤–Ω–æ " + num1 + " + " + num2 + "?");
        int answer = scanner.nextInt();

        return answer == (num1 + num2);
    }

    public boolean isMoveCorrect(int targetX, int targetY) {
        boolean horizontalMove = (y == targetY) && (Math.abs(x - targetX) == 1);
        boolean verticalMove = (x == targetX) && (Math.abs(y - targetY) == 1);

        return horizontalMove || verticalMove;
    }

    public void decreaseLives() {
        if (lives > 0) {
            lives--;
            System.out.println("‚ùå –ü–æ—Ç–µ—Ä—è–Ω–∞ –∂–∏–∑–Ω—å! –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: " + lives);

            if (!isAlive()) {
                System.out.println("üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–±.");
            }
        }
    }

    public void increaseLives() {
        if (lives < maxLives) {
            lives++;
            System.out.println("‚ù§Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –∂–∏–∑–Ω—å! –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–π: " + lives);
        } else {
            System.out.println("üíö –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π!");
        }
    }

    public void restoreAllLives() {
        lives = maxLives;
        System.out.println("‚ú® –í—Å–µ –∂–∏–∑–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
    }

    public boolean isAlive() {
        return lives > 0;
    }

    public boolean hasReachedCastle(String[][] board, String castle) {
        return board[y - 1][x - 1].equals(castle);
    }

    public void updateBoardPosition(String[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j].equals(image)) {
                    board[i][j] = "  ";
                }
            }
        }
        board[y - 1][x - 1] = image;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public String getImage() {
        return image;
    }

    public int getLives() {
        return lives;
    }

    public int getMaxLives() {
        return maxLives;
    }

    public void setPosition(int x, int y) {
        this.x = x;
        this.y = y;
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    public void printStatus() {
        System.out.println("=== –°–¢–ê–¢–£–° –ü–ï–†–°–û–ù–ê–ñ–ê ===");
        System.out.println("–ü–µ—Ä—Å–æ–Ω–∞–∂: " + image);
        System.out.println("–ü–æ–∑–∏—Ü–∏—è: (" + x + ", " + y + ")");
        System.out.println("–ñ–∏–∑–Ω–∏: " + lives + "/" + maxLives);
        System.out.println("–°—Ç–∞—Ç—É—Å: " + (isAlive() ? "‚ù§Ô∏è –ñ–∏–≤" : "üíÄ –ú—ë—Ä—Ç–≤"));
        System.out.println("========================");
    }
}