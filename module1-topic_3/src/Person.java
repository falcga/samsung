import java.util.Scanner;

public class Person {
    private int x;
    private int y;
    private String image = "‚òï";
    private int lives = 3;
    private final int maxLives = 3;
    private Scanner scanner = new Scanner(System.in);

    public Person(int startX, int startY) {
        this.x = startX;
        this.y = startY;
    }

    public boolean processMove(String[][] board, String castle, Monster[] monsters, Wall[] walls) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫—É–¥–∞ –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂ (—Ö–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É)");
        System.out.println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - (x: " + (x + 1) + ", y: " + (y + 1) + ")");

        int targetX = scanner.nextInt() - 1;
        int targetY = scanner.nextInt() - 1;
        System.out.println("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: " + (targetX + 1) + ", " + (targetY + 1));

        if (!isMoveCorrect(targetX, targetY)) {
            System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–æ–¥! –ú–æ–∂–Ω–æ —Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏.");
            return false;
        }

        if (isWallAtPosition(walls, targetX, targetY)) {
            System.out.println("üß± –ó–¥–µ—Å—å —Å—Ç–µ–Ω–∞! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏.");
            return false;
        }

        String targetCell = board[targetY][targetX];

        if (targetCell.equals("  ")) {
            board[y][x] = "  ";
            this.x = targetX;
            this.y = targetY;
            board[y][x] = image;
            System.out.println("–•–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π; –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: " + (x + 1) + ", " + (y + 1));
            return true;
        } else if (targetCell.equals(castle)) {
            System.out.println("üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∑–∞–º–∫–∞! –ü–æ–±–µ–¥–∞!");
            return true;
        } else {
            for (Monster monster : monsters) {
                if (monster != null && monster.conflictPerson(targetX, targetY)) {
                    return monster.monsterHere(this, board);
                }
            }
            System.out.println("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞!");
            return false;
        }
    }

    private boolean isWallAtPosition(Wall[] walls, int targetX, int targetY) {
        for (Wall wall : walls) {
            if (wall != null && wall.isWallAt(targetX, targetY)) {
                return true;
            }
        }
        return false;
    }

    public boolean isMoveCorrect(int targetX, int targetY) {
        boolean horizontalMove = (y == targetY) && (Math.abs(x - targetX) == 1);
        boolean verticalMove = (x == targetX) && (Math.abs(y - targetY) == 1);

        return horizontalMove || verticalMove;
    }

    public void decreaseLives() {
        if (lives > 0) {
            lives--;
            System.out.println("‚ùå –ü–æ—Ç–µ—Ä—è–Ω–∞ –∂–∏–∑–Ω—å! –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: " + lives);

            if (!isAlive()) {
                System.out.println("üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–±.");
            }
        }
    }

    public void increaseLives() {
        if (lives < maxLives) {
            lives++;
            System.out.println("‚ù§Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –∂–∏–∑–Ω—å! –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–π: " + lives);
        } else {
            System.out.println("üíö –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π!");
        }
    }

    public void restoreAllLives() {
        lives = maxLives;
        System.out.println("‚ú® –í—Å–µ –∂–∏–∑–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
    }

    public boolean isAlive() {
        return lives > 0;
    }

    public boolean hasReachedCastle(String[][] board, String castle) {
        return board[y][x].equals(castle);
    }

    public void updateBoardPosition(String[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j].equals(image)) {
                    board[i][j] = "  ";
                }
            }
        }
        board[y][x] = image;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public String getImage() {
        return image;
    }

    public int getLives() {
        return lives;
    }

    public int getMaxLives() {
        return maxLives;
    }

    public void setPosition(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public void printStatus() {
        System.out.println("=== –°–¢–ê–¢–£–° –ü–ï–†–°–û–ù–ê–ñ–ê ===");
        System.out.println("–ü–µ—Ä—Å–æ–Ω–∞–∂: " + image);
        System.out.println("–ü–æ–∑–∏—Ü–∏—è: (" + (x + 1) + ", " + (y + 1) + ")");
        System.out.println("–ñ–∏–∑–Ω–∏: " + lives + "/" + maxLives);
        System.out.println("–°—Ç–∞—Ç—É—Å: " + (isAlive() ? "‚ù§Ô∏è –ñ–∏–≤" : "üíÄ –ú—ë—Ä—Ç–≤"));
        System.out.println("========================");
    }
}